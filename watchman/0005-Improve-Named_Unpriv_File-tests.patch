From 7c42185318fa2b60980d2acfd27ef5585aaf4c2c Mon Sep 17 00:00:00 2001
From: Dorian Krause <github@91df63fb.com>
Date: Fri, 12 Jun 2020 22:12:14 +0200
Subject: [PATCH 5/5] Improve Named_Unpriv_File tests

---
 Makefile                 |  7 ++++---
 tests/test5.cxx          | 18 +++++++++++++-----
 tests/test6.cxx          | 18 +++++++++++++-----
 tests/utils.cxx          | 32 ++++++++++++++++++++++++++++++++
 tests/utils.hxx          |  7 +++++++
 watchman/clingy_file.hxx |  4 ++--
 6 files changed, 71 insertions(+), 15 deletions(-)
 create mode 100644 tests/utils.cxx
 create mode 100644 tests/utils.hxx

diff --git a/Makefile b/Makefile
index 7841ff2..9e21560 100644
--- a/Makefile
+++ b/Makefile
@@ -13,7 +13,8 @@ OBJ   = main.o watchman.o plugin.o libc_alloc.o child.o program.o \
         buffer.o file.o named_file.o named_unpriv_file.o \
         clingy_file.o named_clingy_file.o named_unpriv_clingy_file.o \
         initfini.o error.o
-TESTS = tests/test1.so tests/test2.so tests/test3.so \
+TESTS = tests/utils.o \
+        tests/test1.so tests/test2.so tests/test3.so \
         tests/test4.so tests/test5.so tests/test6.so \
         tests/test7.so tests/test8.so
 
@@ -38,8 +39,8 @@ tests/%.o: tests/%.cxx
 	$(Q)$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ -c $<
 	@echo "CXX $@"
 
-%.so: %.o
-	$(Q)$(CXX) $(LDFLAGS) -shared -o $@ $<
+tests/%.so: tests/%.o tests/utils.o
+	$(Q)$(CXX) $(LDFLAGS) -shared -o $@ $^
 	@echo "CXX $@"
 
 tar:
diff --git a/tests/test5.cxx b/tests/test5.cxx
index 4ba0a07..68fb846 100644
--- a/tests/test5.cxx
+++ b/tests/test5.cxx
@@ -15,6 +15,8 @@
 #include "watchman/compiler.hxx"
 #include "watchman/error.hxx"
 
+#include "tests/utils.hxx"
+
 static char _producer[6][WATCHMAN_PROGRAM_MAX_ARGV_STRLEN + 1];
 static char *_argv[7];
 
@@ -84,22 +86,28 @@ int Test5_Plugin::init(Watchman *w, int argc, char **argv)
 {
 	Named_Unpriv_File *fd;
 	int err;
+	int uid, gid;
 
 	_alloc = w->alloc();
 
-	if (2 == argc) {
-		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
-		err = fd->open(argv[0], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+	if (3 == argc) {
+		err = get_uid_and_gid(argv[0], &uid, &gid);
 		if (unlikely(err)) {
 			return err;
 		}
-		_fo = fd;
 
-		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
+		fd  = _alloc->create<Named_Unpriv_File>(uid, gid);
 		err = fd->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
 		if (unlikely(err)) {
 			return err;
 		}
+		_fo = fd;
+
+		fd  = _alloc->create<Named_Unpriv_File>(uid, gid);
+		err = fd->open(argv[2], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+		if (unlikely(err)) {
+			return err;
+		}
 		_fe = fd;
 	} else {
 		_fo = _alloc->create<File>(STDOUT_FILENO);
diff --git a/tests/test6.cxx b/tests/test6.cxx
index 23b17a7..c14c380 100644
--- a/tests/test6.cxx
+++ b/tests/test6.cxx
@@ -15,6 +15,8 @@
 #include "watchman/compiler.hxx"
 #include "watchman/error.hxx"
 
+#include "tests/utils.hxx"
+
 static char _producer[6][WATCHMAN_PROGRAM_MAX_ARGV_STRLEN + 1];
 static char *_argv[7];
 
@@ -88,22 +90,28 @@ int Test6_Plugin::init(Watchman *w, int argc, char **argv)
 {
 	Named_Unpriv_File *fd;
 	int err;
+	int uid, gid;
 
 	_alloc = w->alloc();
 
-	if (2 == argc) {
-		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
-		err = fd->open(argv[0], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+	if (3 == argc) {
+		err = get_uid_and_gid(argv[0], &uid, &gid);
 		if (unlikely(err)) {
 			return err;
 		}
-		_fo = fd;
 
-		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
+		fd  = _alloc->create<Named_Unpriv_File>(uid, gid);
 		err = fd->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
 		if (unlikely(err)) {
 			return err;
 		}
+		_fo = fd;
+
+		fd  = _alloc->create<Named_Unpriv_File>(uid, gid);
+		err = fd->open(argv[2], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+		if (unlikely(err)) {
+			return err;
+		}
 		_fe = fd;
 	} else {
 		_fo = _alloc->create<File>(STDOUT_FILENO);
diff --git a/tests/utils.cxx b/tests/utils.cxx
new file mode 100644
index 0000000..bd14e14
--- /dev/null
+++ b/tests/utils.cxx
@@ -0,0 +1,32 @@
+
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <pwd.h>
+
+#include "watchman/compiler.hxx"
+#include "watchman/error.hxx"
+
+#include "tests/utils.hxx"
+
+int get_uid_and_gid(char *name, int *uid, int *gid)
+{
+	struct passwd *pwd;
+
+	*uid = 0;
+	*gid = 0;
+
+	pwd = getpwnam(name);
+	if (unlikely(!pwd)) 
+	{
+		WATCHMAN_ERROR("getpwnam() failed with errno %d: %s", errno, strerror(errno));
+		return -errno;
+	}
+
+	*uid = pwd->pw_uid;
+	*gid = pwd->pw_gid;
+
+	return 0;
+}
+
diff --git a/tests/utils.hxx b/tests/utils.hxx
new file mode 100644
index 0000000..2dc68e6
--- /dev/null
+++ b/tests/utils.hxx
@@ -0,0 +1,7 @@
+
+#ifndef WATCHMAN_TESTS_UTILS_HXX_INCLUDED
+#define WATCHMAN_TESTS_UTILS_HXX_INCLUDED 1
+
+int get_uid_and_gid(char *name, int *uid, int *gid);
+
+#endif
diff --git a/watchman/clingy_file.hxx b/watchman/clingy_file.hxx
index 76e431a..9562420 100644
--- a/watchman/clingy_file.hxx
+++ b/watchman/clingy_file.hxx
@@ -5,8 +5,8 @@
 #include "watchman/config.hxx"
 #include "watchman/named_file.hxx"
 
-/* File with an associated path on a filesystem. In contrast to Named_File instances
- * of Named_Clingy_File are associated with a particular filesystem and mountpoint and
+/* File with an associated path on a filesystem. In contrast to File_Type instances
+ * of Clingy_File are associated with a particular filesystem and mountpoint and
  * will not allow reopening if that filesystem is not mounted where it is expected.
  */
 template<class File_Type>
-- 
2.25.4

