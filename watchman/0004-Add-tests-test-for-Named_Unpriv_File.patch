From eceda666b54caa61cdf3f1b9784d0d4b42e871de Mon Sep 17 00:00:00 2001
From: Dorian Krause <github@91df63fb.com>
Date: Fri, 12 Jun 2020 21:54:56 +0200
Subject: [PATCH 4/5] Add tests test for Named_Unpriv_File

---
 Makefile        |   3 +-
 tests/test5.cxx |  60 ++++++++++-----------
 tests/test6.cxx |  74 +++++++++++++-------------
 tests/test7.cxx | 134 ++++++++++++++++++++++++++++++++++++++++++++++
 tests/test8.cxx | 138 ++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 341 insertions(+), 68 deletions(-)
 create mode 100644 tests/test7.cxx
 create mode 100644 tests/test8.cxx

diff --git a/Makefile b/Makefile
index 36ffb70..7841ff2 100644
--- a/Makefile
+++ b/Makefile
@@ -14,7 +14,8 @@ OBJ   = main.o watchman.o plugin.o libc_alloc.o child.o program.o \
         clingy_file.o named_clingy_file.o named_unpriv_clingy_file.o \
         initfini.o error.o
 TESTS = tests/test1.so tests/test2.so tests/test3.so \
-        tests/test4.so tests/test5.so tests/test6.so
+        tests/test4.so tests/test5.so tests/test6.so \
+        tests/test7.so tests/test8.so
 
 Q = @
 
diff --git a/tests/test5.cxx b/tests/test5.cxx
index 8af45a4..4ba0a07 100644
--- a/tests/test5.cxx
+++ b/tests/test5.cxx
@@ -10,7 +10,7 @@
 #include "watchman/program.hxx"
 #include "watchman/buffer.hxx"
 #include "watchman/file.hxx"
-#include "watchman/named_clingy_file.hxx"
+#include "watchman/named_unpriv_file.hxx"
 #include "watchman/watchman.hxx"
 #include "watchman/compiler.hxx"
 #include "watchman/error.hxx"
@@ -42,7 +42,7 @@ class Test5_Program : public Program
 {
 
 public:
-				Test5_Program();
+			Test5_Program();
 
 };
 
@@ -50,24 +50,24 @@ class Test5_Plugin : public Watchman_Plugin
 {
 
 public:
-				explicit Test5_Plugin(void *handle, int version);
+			explicit Test5_Plugin(void *handle, int version);
 
 public:
-	int			init(Watchman *w, int argc, char **argv);
-	int			fini();
+	int		init(Watchman *w, int argc, char **argv);
+	int		fini();
 
 private:
-	Allocator		*_alloc;
+	Allocator	*_alloc;
 
 private:
-	Test5_Program		_proc;
+	Test5_Program	_proc;
 
 private:
-	Buffer			_buf;
+	Buffer		_buf;
 
 private:
-	Named_Clingy_File	*_fo;
-	Named_Clingy_File	*_fe;
+	File		*_fo;
+	File		*_fe;
 };
 
 Test5_Program::Test5_Program()
@@ -82,28 +82,28 @@ Test5_Plugin::Test5_Plugin(void *handle, int version)
 
 int Test5_Plugin::init(Watchman *w, int argc, char **argv)
 {
+	Named_Unpriv_File *fd;
 	int err;
 
 	_alloc = w->alloc();
 
-	_fo = _alloc->create<Named_Clingy_File>();
-	err = _fo->attach(argv[0]);
-	if (unlikely(err)) {
-		return err;
-	}
-	err = _fo->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
-	if (unlikely(err)) {
-		return err;
-	}
-
-	_fe = _alloc->create<Named_Clingy_File>();
-	err = _fe->attach(argv[0]);
-	if (unlikely(err)) {
-		return err;
-	}
-	err = _fe->open(argv[2], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
-	if (unlikely(err)) {
-		return err;
+	if (2 == argc) {
+		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
+		err = fd->open(argv[0], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+		if (unlikely(err)) {
+			return err;
+		}
+		_fo = fd;
+
+		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
+		err = fd->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+		if (unlikely(err)) {
+			return err;
+		}
+		_fe = fd;
+	} else {
+		_fo = _alloc->create<File>(STDOUT_FILENO);
+		_fe = _alloc->create<File>(STDERR_FILENO);
 	}
 
 	err = w->add_child(&_proc, &_buf, _fo, _fe);
@@ -117,8 +117,8 @@ int Test5_Plugin::init(Watchman *w, int argc, char **argv)
 
 int Test5_Plugin::fini()
 {
-	_fo = _alloc->destroy<Named_Clingy_File>(_fo);
-	_fe = _alloc->destroy<Named_Clingy_File>(_fe);
+	_fo = _alloc->destroy<File>(_fo);
+	_fe = _alloc->destroy<File>(_fe);
 
 	return 0;
 }
diff --git a/tests/test6.cxx b/tests/test6.cxx
index 3b8dfc7..23b17a7 100644
--- a/tests/test6.cxx
+++ b/tests/test6.cxx
@@ -10,7 +10,7 @@
 #include "watchman/program.hxx"
 #include "watchman/buffer.hxx"
 #include "watchman/file.hxx"
-#include "watchman/named_clingy_file.hxx"
+#include "watchman/named_unpriv_file.hxx"
 #include "watchman/watchman.hxx"
 #include "watchman/compiler.hxx"
 #include "watchman/error.hxx"
@@ -42,72 +42,72 @@ static char **_fill_argv()
 	return _argv;
 }
 
-class Test4_Program : public Program
+class Test6_Program : public Program
 {
 
 public:
-				Test4_Program();
+			Test6_Program();
 
 };
 
-class Test4_Plugin : public Watchman_Plugin
+class Test6_Plugin : public Watchman_Plugin
 {
 
 public:
-				explicit Test4_Plugin(void *handle, int version);
+			explicit Test6_Plugin(void *handle, int version);
 
 public:
-	int			init(Watchman *w, int argc, char **argv);
-	int			fini();
+	int		init(Watchman *w, int argc, char **argv);
+	int		fini();
 
 private:
-	Allocator		*_alloc;
+	Allocator	*_alloc;
 
 private:
-	Test4_Program		_proc;
+	Test6_Program	_proc;
 
 private:
-	Buffer			_buf;
+	Buffer		_buf;
 
 private:
-	Named_Clingy_File	*_fo;
-	Named_Clingy_File	*_fe;
+	File		*_fo;
+	File		*_fe;
 };
 
-Test4_Program::Test4_Program()
+Test6_Program::Test6_Program()
 : Program(_fill_argv())
 {
 }
 
-Test4_Plugin::Test4_Plugin(void *handle, int version)
+Test6_Plugin::Test6_Plugin(void *handle, int version)
 : Watchman_Plugin(handle, version), _fo(NULL), _fe(NULL)
 {
 }
 
-int Test4_Plugin::init(Watchman *w, int argc, char **argv)
+int Test6_Plugin::init(Watchman *w, int argc, char **argv)
 {
+	Named_Unpriv_File *fd;
 	int err;
 
 	_alloc = w->alloc();
 
-	_fo = _alloc->create<Named_Clingy_File>();
-	err = _fo->attach(argv[0]);
-	if (unlikely(err)) {
-		return err;
-	}
-	err = _fo->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
-	if (unlikely(err)) {
-		return err;
-	}
-
-	_fe = _alloc->create<Named_Clingy_File>();
-	err = _fe->attach(argv[0]);
-	if (unlikely(err)) {
-		return err;
-	}
-	err = _fe->open(argv[2], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
-	if (unlikely(err)) {
-		return err;
+	if (2 == argc) {
+		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
+		err = fd->open(argv[0], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+		if (unlikely(err)) {
+			return err;
+		}
+		_fo = fd;
+
+		fd  = _alloc->create<Named_Unpriv_File>(1000, 100);
+		err = fd->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+		if (unlikely(err)) {
+			return err;
+		}
+		_fe = fd;
+	} else {
+		_fo = _alloc->create<File>(STDOUT_FILENO);
+		_fe = _alloc->create<File>(STDERR_FILENO);
 	}
 
 	err = w->add_child(&_proc, &_buf, _fo, _fe);
@@ -119,10 +119,10 @@ int Test4_Plugin::init(Watchman *w, int argc, char **argv)
 	return 0;
 }
 
-int Test4_Plugin::fini()
+int Test6_Plugin::fini()
 {
-	_fo = _alloc->destroy<Named_Clingy_File>(_fo);
-	_fe = _alloc->destroy<Named_Clingy_File>(_fe);
+	_fo = _alloc->destroy<File>(_fo);
+	_fe = _alloc->destroy<File>(_fe);
 
 	return 0;
 }
@@ -133,6 +133,6 @@ extern "C" Watchman_Plugin *entry(void *handle, Watchman *w)
 
 	alloc = w->alloc();
 
-	return alloc->create<Test4_Plugin>(handle, 1);
+	return alloc->create<Test6_Plugin>(handle, 1);
 };
 
diff --git a/tests/test7.cxx b/tests/test7.cxx
new file mode 100644
index 0000000..757d8fc
--- /dev/null
+++ b/tests/test7.cxx
@@ -0,0 +1,134 @@
+
+#include <unistd.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+
+#include "watchman/plugin.hxx"
+#include "watchman/alloc.hxx"
+#include "watchman/program.hxx"
+#include "watchman/buffer.hxx"
+#include "watchman/file.hxx"
+#include "watchman/named_clingy_file.hxx"
+#include "watchman/watchman.hxx"
+#include "watchman/compiler.hxx"
+#include "watchman/error.hxx"
+
+static char _producer[6][WATCHMAN_PROGRAM_MAX_ARGV_STRLEN + 1];
+static char *_argv[7];
+
+static char **_fill_argv()
+{
+	strcpy(_producer[0], "tests/producer");
+	strcpy(_producer[1], "100");	/* number of rounds */
+	strcpy(_producer[2], "1-200");	/* line length variation */
+	strcpy(_producer[3], "1-10");	/* number of lines written at once */
+	strcpy(_producer[4], "10");	/* output frequency [Hz] */
+	strcpy(_producer[5], "tests/test7.copy");
+
+	_argv[0] = _producer[0];
+	_argv[1] = _producer[1];
+	_argv[2] = _producer[2];
+	_argv[3] = _producer[3];
+	_argv[4] = _producer[4];
+	_argv[5] = _producer[5];
+	_argv[6] = NULL;
+
+	return _argv;
+}
+
+class Test7_Program : public Program
+{
+
+public:
+				Test7_Program();
+
+};
+
+class Test7_Plugin : public Watchman_Plugin
+{
+
+public:
+				explicit Test7_Plugin(void *handle, int version);
+
+public:
+	int			init(Watchman *w, int argc, char **argv);
+	int			fini();
+
+private:
+	Allocator		*_alloc;
+
+private:
+	Test7_Program		_proc;
+
+private:
+	Buffer			_buf;
+
+private:
+	Named_Clingy_File	*_fo;
+	Named_Clingy_File	*_fe;
+};
+
+Test7_Program::Test7_Program()
+: Program(_fill_argv())
+{
+}
+
+Test7_Plugin::Test7_Plugin(void *handle, int version)
+: Watchman_Plugin(handle, version), _fo(NULL), _fe(NULL)
+{
+}
+
+int Test7_Plugin::init(Watchman *w, int argc, char **argv)
+{
+	int err;
+
+	_alloc = w->alloc();
+
+	_fo = _alloc->create<Named_Clingy_File>();
+	err = _fo->attach(argv[0]);
+	if (unlikely(err)) {
+		return err;
+	}
+	err = _fo->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+	if (unlikely(err)) {
+		return err;
+	}
+
+	_fe = _alloc->create<Named_Clingy_File>();
+	err = _fe->attach(argv[0]);
+	if (unlikely(err)) {
+		return err;
+	}
+	err = _fe->open(argv[2], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+	if (unlikely(err)) {
+		return err;
+	}
+
+	err = w->add_child(&_proc, &_buf, _fo, _fe);
+	if (unlikely(err)) {
+		WATCHMAN_ERROR("Failed to add children to list: %d", err);
+		return err;
+	}
+
+	return 0;
+}
+
+int Test7_Plugin::fini()
+{
+	_fo = _alloc->destroy<Named_Clingy_File>(_fo);
+	_fe = _alloc->destroy<Named_Clingy_File>(_fe);
+
+	return 0;
+}
+
+extern "C" Watchman_Plugin *entry(void *handle, Watchman *w)
+{
+	Allocator *alloc;
+
+	alloc = w->alloc();
+
+	return alloc->create<Test7_Plugin>(handle, 1);
+}
+
diff --git a/tests/test8.cxx b/tests/test8.cxx
new file mode 100644
index 0000000..0f8c5de
--- /dev/null
+++ b/tests/test8.cxx
@@ -0,0 +1,138 @@
+
+#include <unistd.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+
+#include "watchman/plugin.hxx"
+#include "watchman/alloc.hxx"
+#include "watchman/program.hxx"
+#include "watchman/buffer.hxx"
+#include "watchman/file.hxx"
+#include "watchman/named_clingy_file.hxx"
+#include "watchman/watchman.hxx"
+#include "watchman/compiler.hxx"
+#include "watchman/error.hxx"
+
+static char _producer[6][WATCHMAN_PROGRAM_MAX_ARGV_STRLEN + 1];
+static char *_argv[7];
+
+static char **_fill_argv()
+{
+	/* Write a large number of lines at once to make sure that
+	 * output that is still pending when the child terminates
+	 * is correctly read.
+	 */
+	strcpy(_producer[0], "tests/producer");
+	strcpy(_producer[1], "1");	/* number of rounds */
+	strcpy(_producer[2], "1-200");	/* line length variation */
+	strcpy(_producer[3], "1000");	/* number of lines written at once */
+	strcpy(_producer[4], "10");	/* output frequency [Hz] */
+	strcpy(_producer[5], "tests/test8.copy");
+
+	_argv[0] = _producer[0];
+	_argv[1] = _producer[1];
+	_argv[2] = _producer[2];
+	_argv[3] = _producer[3];
+	_argv[4] = _producer[4];
+	_argv[5] = _producer[5];
+	_argv[6] = NULL;
+
+	return _argv;
+}
+
+class Test8_Program : public Program
+{
+
+public:
+				Test8_Program();
+
+};
+
+class Test8_Plugin : public Watchman_Plugin
+{
+
+public:
+				explicit Test8_Plugin(void *handle, int version);
+
+public:
+	int			init(Watchman *w, int argc, char **argv);
+	int			fini();
+
+private:
+	Allocator		*_alloc;
+
+private:
+	Test8_Program		_proc;
+
+private:
+	Buffer			_buf;
+
+private:
+	Named_Clingy_File	*_fo;
+	Named_Clingy_File	*_fe;
+};
+
+Test8_Program::Test8_Program()
+: Program(_fill_argv())
+{
+}
+
+Test8_Plugin::Test8_Plugin(void *handle, int version)
+: Watchman_Plugin(handle, version), _fo(NULL), _fe(NULL)
+{
+}
+
+int Test8_Plugin::init(Watchman *w, int argc, char **argv)
+{
+	int err;
+
+	_alloc = w->alloc();
+
+	_fo = _alloc->create<Named_Clingy_File>();
+	err = _fo->attach(argv[0]);
+	if (unlikely(err)) {
+		return err;
+	}
+	err = _fo->open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+	if (unlikely(err)) {
+		return err;
+	}
+
+	_fe = _alloc->create<Named_Clingy_File>();
+	err = _fe->attach(argv[0]);
+	if (unlikely(err)) {
+		return err;
+	}
+	err = _fe->open(argv[2], O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
+	if (unlikely(err)) {
+		return err;
+	}
+
+	err = w->add_child(&_proc, &_buf, _fo, _fe);
+	if (unlikely(err)) {
+		WATCHMAN_ERROR("Failed to add children to list: %d", err);
+		return err;
+	}
+
+	return 0;
+}
+
+int Test8_Plugin::fini()
+{
+	_fo = _alloc->destroy<Named_Clingy_File>(_fo);
+	_fe = _alloc->destroy<Named_Clingy_File>(_fe);
+
+	return 0;
+}
+
+extern "C" Watchman_Plugin *entry(void *handle, Watchman *w)
+{
+	Allocator *alloc;
+
+	alloc = w->alloc();
+
+	return alloc->create<Test8_Plugin>(handle, 1);
+};
+
-- 
2.25.4

